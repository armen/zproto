.template 0
#   zproto_codec_c.gsl
#
#   Generates a codec for a protocol specification
#
include "zproto_lib.gsl"
include "zproto_lib_go.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate

.output "$(go_package_path())/$(go_package_name()).go"
// Package $(go_package_name()) is 100% generated. If you edit this file,
// you will lose your changes at the next build cycle.
// DO NOT MAKE ANY CHANGES YOU WISH TO KEEP.
//
// The correct places for commits are:
//  - The XML model used for this code generation: $(filename)
//  - The code generation script that built this file: $(script)
package $(go_package_name())

import (
	"bytes"
	"encoding/binary"
	"errors"

	zmq "github.com/pebbe/zmq4"
)

.const_maxlen = 16 # 16 is number of characters of Signature and its type
.for define
.    if const_maxlen < string.length($(define.Name:c))
.        const_maxlen = string.length($(define.Name:c))
.    endif
.endfor
const (
	Signature uint16 = 0xAAA0 | $(class.signature)
.for define
	$(define.Name:c%-$(const_maxlen)s) = $(value)
.endfor
)

.id_maxlen = 0
.for message where !defined (repeat)
.    message.origname = message.name
.    message.name = go_name(message.name)
.    if id_maxlen < string.length(message.name)+2
.        id_maxlen = string.length(message.name)+2
.    endif
.endfor
const (
.for message where !defined (repeat)
	$("$(name:no)Id"%-$(id_maxlen)s) uint8 = $(id)
.endfor
)

type Transit interface {
	Marshal() ([]byte, error)
	Unmarshal(...[]byte) error
	String() string
	Send(*zmq.Socket) error
	SetRoutingId([]byte)
	RoutingId() []byte
.for field where defined(in_header)
	Set$(fname:no)($(gotype))
	$(fname:no)() $(gotype)
.endfor
}

// Unmarshals data from raw frames.
func Unmarshal(frames ...[]byte) (t Transit, err error) {
	if frames == nil {
		return nil, errors.New("can't unmarshal an empty message")
	}
	var buffer *bytes.Buffer

	// Check the signature
	var signature uint16
	buffer = bytes.NewBuffer(frames[0])
	binary.Read(buffer, binary.BigEndian, &signature)
	if signature != Signature {
		// Invalid signature
		return nil, errors.New("invalid signature")
	}

	// Get message id and parse per message type
	var id uint8
	binary.Read(buffer, binary.BigEndian, &id)

	switch id {
.for message where !defined (repeat)
	case $(name:no)Id:
		t = New$(name:no)()
.endfor
	}
	err = t.Unmarshal(frames...)

	return t, err
}

// Receives marshaled data from 0mq socket.
func Recv(socket *zmq.Socket) (t Transit, err error) {
	return recv(socket, 0)
}

// Receives marshaled data from 0mq socket. It won't wait for input.
func RecvNoWait(socket *zmq.Socket) (t Transit, err error) {
	return recv(socket, zmq.DONTWAIT)
}

// Receives marshaled data from 0mq socket.
func recv(socket *zmq.Socket, flag zmq.Flag) (t Transit, err error) {
	// Read all frames
	frames, err := socket.RecvMessageBytes(flag)
	if err != nil {
		return nil, err
	}

	sType, err := socket.GetType()
	if err != nil {
		return nil, err
	}

	var routingId []byte
	// If message came from a router socket, first frame is routingId
	if sType == zmq.ROUTER {
		if len(frames) <= 1 {
			return nil, errors.New("no routingId")
		}
		routingId = frames[0]
		frames = frames[1:]
	}

	t, err = Unmarshal(frames...)
	if err != nil {
		return nil, err
	}

	if sType == zmq.ROUTER {
		t.SetRoutingId(routingId)
	}
	return t, err
}

// Clones a message.
func Clone(t Transit) Transit {

	switch msg := t.(type) {
.for message where !defined (repeat)
	case *$(name:no):
		cloned := New$(name:no)()
		routingId := make([]byte, len(msg.RoutingId()))
		copy(routingId, msg.RoutingId())
		cloned.SetRoutingId(routingId)
.    for field
.       if type = "hash"
		for key, val := range msg.$(name:no) {
			cloned.$(name:no)[key] = val
		}
.       elsif type = "strings"
		for idx, str := range msg.$(name:no) {
			cloned.$(name:no)[idx] = str
		}
.       elsif type = "octets"
.           if defined(size)
		cloned.$(name:no) = msg.$(name:no)
.           else
		cloned.$(name:no) = append(cloned.$(name:no), msg.$(name:no)...)
.           endif
.       elsif type = "frame" | type = "msg" | type = "uuid" | type = "chunk"
		cloned.$(name:no) = append(cloned.$(name:no), msg.$(name:no)...)
.       else
		cloned.$(name:no) = msg.$(name:no)
.       endif
.    endfor
		return cloned
.    if last ()
.    else

.endif
.endfor
	}

	return nil
}

// putString marshals a string into the buffer.
func putString(buffer *bytes.Buffer, str string) {
	size := len(str)
	binary.Write(buffer, binary.BigEndian, byte(size))
	binary.Write(buffer, binary.BigEndian, []byte(str[0:size]))
}

// getString unmarshals a string from the buffer.
func getString(buffer *bytes.Buffer) string {
	var size byte
	binary.Read(buffer, binary.BigEndian, &size)
	str := make([]byte, size)
	binary.Read(buffer, binary.BigEndian, &str)
	return string(str)
}

// putLongString marshals a string into the buffer.
func putLongString(buffer *bytes.Buffer, str string) {
	size := len(str)
	binary.Write(buffer, binary.BigEndian, uint32(size))
	binary.Write(buffer, binary.BigEndian, []byte(str[0:size]))
}

// getLongString unmarshals a string from the buffer.
func getLongString(buffer *bytes.Buffer) string {
	var size uint32
	binary.Read(buffer, binary.BigEndian, &size)
	str := make([]byte, size)
	binary.Read(buffer, binary.BigEndian, &str)
	return string(str)
}

// putBytes marshals []byte into the buffer.
func putBytes(buffer *bytes.Buffer, data []byte) {
	size := uint64(len(data))
	binary.Write(buffer, binary.BigEndian, size)
	binary.Write(buffer, binary.BigEndian, data)
}

// getBytes unmarshals []byte from the buffer.
func getBytes(buffer *bytes.Buffer) []byte {
	var size uint64
	binary.Read(buffer, binary.BigEndian, &size)
	data := make([]byte, size)
	binary.Read(buffer, binary.BigEndian, &data)
	return data
}
.#
.# Each message is in a separate file
.#
.for message where !defined (repeat)
.output "$(go_package_path())/$(origname).go"
package $(go_package_name())

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
.if defined(message.strconv)
	"strconv"
.endif

	zmq "github.com/pebbe/zmq4"
)

// $(string.trim (.?''):left)
type $(name:no) struct {
	$("routingId"%-$(field_maxlen + 1)s)[]byte
.for field
.   if defined(in_header)
	$(name%-$(field_maxlen + 1)s)$(gotype)
.   else
	$(name:no%-$(field_maxlen + 1)s)$(gotype)
.   endif
.endfor
}
.self = string.substr(name,0,0)

// New creates new $(name:no) message.
func New$(name:no)() *$(name:no) {
	$(name) := &$(name:no){}
.struct = "$(name)"
.for field where type = "hash"
	$(struct).$(name:no) = make(map[string]string)
.endfor
	return $(name)
}

// String returns print friendly name.
func ($(self) *$(name:no)) String() string {
	str := "$(CLASS.NAME)_$(NAME):\\n"
.for field
	str += fmt.Sprintf("    $(name:no) = %v\\n", $(self).$(name:no))
.endfor
	return str
}

// Marshal serializes the message.
func ($(self) *$(name:no)) Marshal() ([]byte, error) {
	// Calculate size of serialized data
	bufferSize := 2 + 1 // Signature and message ID
.for field
.    if type = "number"

	// $(name:no) is a $(size)-byte integer
	bufferSize += $(size)
.    elsif type = "octets" | type = "chunk" | type = "uuid"

.        if defined(size)
	// $(name:no) is a block of [$(size)]byte
	bufferSize += $(size)
.        else
	// $(name:no) is a block of []byte with one byte length
	bufferSize += 1 + len($(self).$(name:no))
.        endif
.    elsif type = "string"

	// $(name:no) is a string with 1-byte length
.        if defined (field.value)
	bufferSize += 1 + len("$(field.value:)")
.        else
	bufferSize++ // Size is one byte
	bufferSize += len($(self).$(name:no))
.        endif
.    elsif type = "longstr"

	// $(name:no) is a string with 4-byte length
.        if defined (field.value)
	bufferSize += 4 + len("$(field.value:)")
.        else
	bufferSize += 4 // Size is 4 bytes
	bufferSize += len($(self).$(name:no))
.        endif
.    elsif type = "strings"

	// $(name:no) is an array of strings
	bufferSize += 4 // Size is 4 bytes
	// Add up size of string contents
	for _, val := range $(self).$(name:no) {
		bufferSize += 4 + len(val)
	}
.    elsif type = "hash"

	// $(name:no) is a hash table
	bufferSize += 4 // Size is 4 bytes
	for key, val := range $(self).$(name:no) {
		bufferSize += 1 + len(key)
		bufferSize += 4 + len(val)
	}
.    endif
.endfor

	// Now serialize the message
	tmpBuf := make([]byte, bufferSize)
	tmpBuf = tmpBuf[:0]
	buffer := bytes.NewBuffer(tmpBuf)
	binary.Write(buffer, binary.BigEndian, Signature)
	binary.Write(buffer, binary.BigEndian, $(name:no)Id)
.for field
.    if type = "number"

	// $(name:no)
.        if defined (field.value)
	value, _ := strconv.ParseUint("$(field.value:)", 10, $(size)*8)
	binary.Write(buffer, binary.BigEndian, $(gotype)(value))
.        else
	binary.Write(buffer, binary.BigEndian, $(self).$(name:no))
.        endif
.    elsif type = "octets" | type = "chunk" | type = "uuid"

	// $(name:no)
.        if defined(size)
	binary.Write(buffer, binary.BigEndian, $(self).$(name:no))
.        else
	putBytes(buffer, $(self).$(name:no))
.        endif
.    elsif type = "string"

	// $(name:no)
.        if defined (field.value)
	putString(buffer, "$(field.value:)")
.        else
	putString(buffer, $(self).$(name:no))
.        endif
.    elsif type = "longstr"

	// $(name:no)
.        if defined (field.value)
	putLongString(buffer, "$(field.value:)")
.        else
	putLongString(buffer, $(self).$(name:no))
.        endif
.    elsif type = "strings"

	// $(name:no)
	binary.Write(buffer, binary.BigEndian, uint32(len($(self).$(name:no))))
	for _, val := range $(self).$(name:no) {
		putLongString(buffer, val)
	}
.    elsif type = "hash"

	// $(name:no)
	binary.Write(buffer, binary.BigEndian, uint32(len($(self).$(name:no))))
	for key, val := range $(self).$(name:no) {
		putString(buffer, key)
		putLongString(buffer, val)
	}
.    endif
.endfor

	return buffer.Bytes(), nil
}

// Unmarshals the message.
func ($(self) *$(name:no)) Unmarshal(frames ...[]byte) error {
	if frames == nil {
		return errors.New("Can't unmarshal empty message")
	}

	frame := frames[0]
	frames = frames[1:]

	buffer := bytes.NewBuffer(frame)

	// Get and check protocol signature
	var signature uint16
	binary.Read(buffer, binary.BigEndian, &signature)
	if signature != Signature {
		return errors.New("invalid signature")
	}

	// Get message id and parse per message type
	var id uint8
	binary.Read(buffer, binary.BigEndian, &id)
	if id != $(name:no)Id {
		return errors.New("malformed $(name:no) message")
	}
.frames = 0
.for field
	// $(name:no)
.    if type = "number"
	binary.Read(buffer, binary.BigEndian, &$(self).$(name:no))
.        if defined (field.value)
	if $(self).$(name:no) != $(field.value:) {
		return errors.New("malformed $(name:no) message")
	}
.        endif
.    elsif type = "octets" | type = "uuid" | type = "chunk"
.        if defined(size)
	binary.Read(buffer, binary.BigEndian, &$(self).$(name:no))
.        else
	$(self).$(name:no) = getBytes(buffer)
.        endif
.    elsif type = "string"
	$(self).$(name:no) = getString(buffer)
.        if defined (field.value)
	if $(self).$(name:no) != "$(field.value:)" {
		return errors.New("malformed $(name:no) message")
	}
.        endif
.    elsif type = "longstr"
	$(self).$(name:no) = getLongString(buffer)
.        if defined (field.value)
	if $(self).$(name:no) != "$(field.value:)" {
		return errors.New("malformed $(name:no) message")
	}
.        endif
.    elsif type = "strings"
.        _size = "$(name)Size"
	var $(_size:no) uint32
	binary.Read(buffer, binary.BigEndian, &$(_size:no))
	for ; $(_size:no) != 0; $(_size:no)-- {
		$(self).$(name:no) = append($(self).$(name:no), getLongString(buffer))
	}
.    elsif type = "hash"
.        _size = "$(name)Size"
	var $(_size:no) uint32
	binary.Read(buffer, binary.BigEndian, &$(_size:no))
	for ; $(_size:no) != 0; $(_size:no)-- {
		key := getString(buffer)
		val := getLongString(buffer)
		$(self).$(name:no)[key] = val
	}
.    elsif type = "frame" | type = "msg"
	if $(frames) <= len(frames)-1 {
		$(self).$(name:no) = frames[$(frames)]
	}
.    frames = frames + 1
.    endif
.endfor

	return nil
}

// Sends marshaled data through 0mq socket.
func ($(self) *$(name:no)) Send(socket *zmq.Socket) (err error) {
	frame, err := $(self).Marshal()
	if err != nil {
		return err
	}

	socType, err := socket.GetType()
	if err != nil {
		return err
	}

	// If we're sending to a ROUTER, we send the routingId first
	if socType == zmq.ROUTER {
		_, err = socket.SendBytes($(self).routingId, zmq.SNDMORE)
		if err != nil {
			return err
		}
	}

	// Now send the data frame
.if !count (field, type = "frame") & !count (field, type = "msg")
	_, err = socket.SendBytes(frame, 0)
.else
	_, err = socket.SendBytes(frame, zmq.SNDMORE)
.endif
	if err != nil {
		return err
	}
.if count (field, type = "frame") | count (field, type = "msg")
	// Now send any frame fields, in order
.endif
.for field where type = "frame" | type = "msg"
.    if last ()
	_, err = socket.SendBytes($(self).$(name:no), 0)
.    else
	_, err = socket.SendBytes($(self).$(name:no), zmq.SNDMORE)
.    endif
.endfor

	return err
}

// RoutingId returns the routingId for this message, routingId should be set
// whenever talking to a ROUTER.
func ($(self) *$(name:no)) RoutingId() []byte {
	return $(self).routingId
}

// SetRoutingId sets the routingId for this message, routingId should be set
// whenever talking to a ROUTER.
func ($(self) *$(name:no)) SetRoutingId(routingId []byte) {
	$(self).routingId = routingId
}
.struct = "$(name:no)"
.for field where defined(in_header)

// Set$(name:no) sets the $(name).
func ($(self) *$(struct:no)) Set$(fname:no)($(name) $(gotype)) {
	$(self).$(name) = $(name)
}

// $(name:no) returns the $(name).
func ($(self) *$(struct:no)) $(fname:no)() $(gotype) {
	return $(self).$(name)
}
.endfor
.output "$(go_package_path())/$(origname)_test.go"
package $(go_package_name())

import (
	"testing"

	zmq "github.com/pebbe/zmq4"
)

// Yay! Test function.
func Test$(name:no)(t *testing.T) {

	// Create pair of sockets we can send through

	// Output socket
	output, err := zmq.NewSocket(zmq.DEALER)
	if err != nil {
		t.Fatal(err)
	}
	defer output.Close()

	routingId := "Shout"
	output.SetIdentity(routingId)
	err = output.Bind("inproc://selftest-$(name)")
	if err != nil {
		t.Fatal(err)
	}
	defer output.Unbind("inproc://selftest-$(name)")

	// Input socket
	input, err := zmq.NewSocket(zmq.ROUTER)
	if err != nil {
		t.Fatal(err)
	}
	defer input.Close()

	err = input.Connect("inproc://selftest-$(name)")
	if err != nil {
		t.Fatal(err)
	}
	defer input.Disconnect("inproc://selftest-$(name)")

	// Create a $(Name) message and send it through the wire
	$(name) := New$(name:no)()
.   struct = "$(name)"
.   testnum = 120
.   for field where !defined (value)
.       if type = "number"
	$(struct).$(name:no) = $(testnum)
.       elsif type = "octets"
.           if defined(size)
.               data = "'z', " * size
.               data_len = string.length(data)
.               data = string.substr(data, 0, data_len-3)
	$(struct).$(name:no) = [$(size)]byte{$(data)}
.           else
	$(struct).$(name:no) = []byte{'z', 'y'}
.           endif
.       elsif type = "string" | type = "longstr"
	$(struct).$(name:no) = "Life is short but Now lasts for ever"
.       elsif type = "strings"
	$(struct).$(name:no) = []string{"Name: Brutus", "Age: 43"}
.       elsif type = "hash"

	$(struct).$(name:no) = map[string]string{"Name": "Brutus", "Age": "43"}
.       elsif type = "frame" | type = "msg" | type = "uuid" | type = "chunk"
	$(struct).$(name:no) = []byte("Captcha Diem")
.       endif
.   testnum = testnum + 1
.   endfor

	err = $(name).Send(output)
	if err != nil {
		t.Fatal(err)
	}
	transit, err := Recv(input)
	if err != nil {
		t.Fatal(err)
	}

	tr := transit.(*$(name:no))
.   testnum = 120
.   for field where !defined (value)
.       if type = "number"

	if tr.$(name:no) != $(testnum) {
		t.Fatalf("expected %d, got %d", 123, tr.$(name:no))
	}
.       elsif type = "octets"
.           if defined(size)
.           data = "'z', " * size
.           data_len = string.length(data)
.           data = string.substr(data, 0, data_len-3)

	if len(tr.$(name:no)) != $(size) {
		t.Fatalf("mismatch octets size for %s", "$(name:no)")
	}

	for idx, b := range [$(size)]byte{$(data)} {
		if tr.$(name:no)[idx] != b {
			t.Fatalf("mismatch octets value for %s", "$(name:no)")
		}
	}
.           else

	if len(tr.$(name:no)) != 2 {
		t.Fatalf("mismatch octets size for %s", "$(name:no)")
	}

	for idx, b := range []byte{'z', 'y'} {
		if tr.$(name:no)[idx] != b {
			t.Fatalf("mismatch octets value for %s", "$(name:no)")
		}
	}
.           endif
.       elsif type = "string" | type = "longstr"

	if tr.$(name:no) != "Life is short but Now lasts for ever" {
		t.Fatalf("expected %s, got %s", "Life is short but Now lasts for ever", tr.$(name:no))
	}
.       elsif type = "strings"

	for idx, str := range []string{"Name: Brutus", "Age: 43"} {
		if tr.$(name:no)[idx] != str {
			t.Fatalf("expected %s, got %s", str, tr.$(name:no)[idx])
		}
	}
.       elsif type = "hash"

	for key, val := range map[string]string{"Name": "Brutus", "Age": "43"} {
		if tr.$(name:no)[key] != val {
			t.Fatalf("expected %s, got %s", val, tr.$(name:no)[key])
		}
	}
.       elsif type = "frame" | type = "msg" | type = "uuid" | type = "chunk"

	if string(tr.$(name:no)) != "Captcha Diem" {
		t.Fatalf("expected %s, got %s", "Captcha Diem", tr.$(name:no))
	}
.       endif
.   testnum = testnum + 1
.   endfor

	err = tr.Send(input)
	if err != nil {
		t.Fatal(err)
	}

	transit, err = Recv(output)
	if err != nil {
		t.Fatal(err)
	}

	if routingId != string(tr.RoutingId()) {
		t.Fatalf("expected %s, got %s", routingId, string(tr.RoutingId()))
	}
}
.output "$(go_package_path())/$(origname)_zproto_c_test.go"
// +build test_zproto_c
package $(go_package_name())

import (
    "testing"
)

// Tests interoperability of Go implementation with C implementation
func Test$(name:no)ZprotoC(t *testing.T) {
	test$(name:no)InputFromC(t)
}
.output "$(go_package_path())/$(origname)_zproto_c.go"
// +build test_zproto_c
package $(go_package_name())

// #cgo CFLAGS: -I../../../../include -I/usr/local/include
// #cgo LDFLAGS: ../../../.libs/libzproto.a
// #cgo pkg-config: libczmq
//
// #include <czmq.h>
// #include <zproto_example.h>
//
// static zsock_t* zproto_zsock_new(int type) {
//     return zsock_new(type);
// }
//
// static int zproto_zsock_bind(zsock_t *sock, const char *addr) {
//     return zsock_bind(sock, addr);
// }
//
// static void zproto_zsock_destroy(zsock_t **sock) {
//     zsock_destroy(sock);
// }
import "C"

import (
	"testing"
	"unsafe"

	zmq "github.com/pebbe/zmq4"
)

// Tests interoperability of Go implementation with C implementation
func test$(name:no)InputFromC(t *testing.T) {

	// Output socket (C implementaion)
	output := C.zproto_zsock_new(C.ZMQ_DEALER)
    C.zproto_zsock_bind(output, C.CString("tcp://127.0.0.1:5557"))

	// Input socket
	input, err := zmq.NewSocket(zmq.ROUTER)
	if err != nil {
		t.Fatal(err)
	}
	defer input.Close()

	err = input.Connect("tcp://127.0.0.1:5557")
	if err != nil {
		t.Fatal(err)
	}
	defer input.Disconnect("tcp://127.0.0.1:5557")

	// Create a $(Name) message and send it through the wire
.   cprefix = "zproto_$(go_package_name())_"
.   self = "$(name)"
	$(self) := C.$(cprefix)new(C.$(CPREFIX)$(NAME))
.   testnum = 120
.   for field where !defined (value)
.       if type = "number"
	C.$(cprefix)set_$(name)($(self), $(testnum))
.       elsif type = "octets"
.           if defined(size)
.               data = "'z', " * size
.               data_len = string.length(data)
.               data = string.substr(data, 0, data_len-3)
	//$(self).$(name:no) = [$(size)]byte{$(data)}
.           else
	//$(self).$(name:no) = []byte{'z', 'y'}
.           endif
.       elsif type = "string" | type = "longstr"
	//$(self).$(name:no) = "Life is short but Now lasts for ever"
.       elsif type = "strings"
	//$(self).$(name:no) = []string{"Name: Brutus", "Age: 43"}
.       elsif type = "dictionary"
	//$(self).$(name:no) = map[string]string{"Name": "Brutus", "Age": "43"}
.       elsif type = "frame" | type = "msg" | type = "uuid" | type = "chunk"
	//$(self).$(name:no) = []byte("Captcha Diem")
.       endif
.   testnum = testnum + 1
.   endfor

    // Send twice from same object
    C.zproto_example_send_again($(self), unsafe.Pointer(output))
    C.zproto_example_send(&$(self), unsafe.Pointer(output))

	for i:=0; i < 2; i++ {
		transit, err := Recv(input)
		if err != nil {
			t.Fatal(err)
		}

		tr := transit.(*$(name:no))
.   testnum = 120
.   for field where !defined (value)
.       if type = "number"

		if tr.$(name:no) != $(testnum) {
			t.Fatalf("expected %d, got %d", 123, tr.$(name:no))
		}
.       elsif type = "octets"
.           if defined(size)
.           data = "'z', " * size
.           data_len = string.length(data)
.           data = string.substr(data, 0, data_len-3)

		if len(tr.$(name:no)) != $(size) {
			t.Fatalf("mismatch octets size for %s", "$(name:no)")
		}

		for idx, b := range [$(size)]byte{$(data)} {
			if tr.$(name:no)[idx] != b {
				t.Fatalf("mismatch octets value for %s", "$(name:no)")
			}
		}
.           else

		if len(tr.$(name:no)) != 2 {
			t.Fatalf("mismatch octets size for %s", "$(name:no)")
		}

		for idx, b := range []byte{'z', 'y'} {
			if tr.$(name:no)[idx] != b {
				t.Fatalf("mismatch octets value for %s", "$(name:no)")
			}
		}
.           endif
.       elsif type = "string" | type = "longstr"

		if tr.$(name:no) != "Life is short but Now lasts for ever" {
			//t.Fatalf("expected %s, got %s", "Life is short but Now lasts for ever", tr.$(name:no))
		}
.       elsif type = "strings"

		for idx, str := range []string{"Name: Brutus", "Age: 43"} {
			if tr.$(name:no)[idx] != str {
				t.Fatalf("expected %s, got %s", str, tr.$(name:no)[idx])
			}
		}
.       elsif type = "dictionary"

		for key, val := range map[string]string{"Name": "Brutus", "Age": "43"} {
			if tr.$(name:no)[key] != val {
				t.Fatalf("expected %s, got %s", val, tr.$(name:no)[key])
			}
		}
.       elsif type = "frame" | type = "msg" | type = "uuid" | type = "chunk"

		if string(tr.$(name:no)) != "Captcha Diem" {
			t.Fatalf("expected %s, got %s", "Captcha Diem", tr.$(name:no))
		}
.       endif
.   testnum = testnum + 1
.   endfor
	}

/*
	err = tr.Send(input)
	if err != nil {
		t.Fatal(err)
	}

	transit, err = Recv(output)
	if err != nil {
		t.Fatal(err)
	}

	if routingId != string(tr.RoutingId()) {
		t.Fatalf("expected %s, got %s", routingId, string(tr.RoutingId()))
	}
*/
	C.zproto_zsock_destroy(&output);
}
.endfor
